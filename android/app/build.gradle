def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    lintOptions {
        checkReleaseBuilds false
        disable "InvalidPackage"
    }

    defaultConfig {
        applicationId "cn.edu.jmu.openjmu"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile file(keystoreProperties["storeFile"])
            storePassword keystoreProperties["storePassword"]
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
        }
        profile {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        }
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "assembleRelease") {
            task.finalizedBy copyRelease
        }
    }
}

task copyRelease {
    doLast {
        def fromFile = "../../build/app/outputs/apk/release/app-release.apk"
        def intoFile = "../../release/"
        def sourceFile = file(fromFile)
        def destinationPath = file(intoFile)
        def time = buildTime()
        def destinationFileName = "OpenJMU_v${flutterVersionName}+${flutterVersionCode}_${time}.apk"


        if (!sourceFile.exists()) {
            throw new GradleException("Source file does not exist.")
        } else {
            if (!destinationPath.exists()) {
                destinationPath.mkdir()
            }
            copy {
                from fromFile
                into intoFile
                rename { destinationFileName }
            }
        }
        println("\nRelease file copied to ${destinationPath}/${destinationFileName} .")
    }
}

flutter {
    source "../.."
}

dependencies {
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"
    implementation "com.github.bumptech.glide:glide:4.11.0"
    kapt "com.github.bumptech.glide:compiler:4.11.0"
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"
}

def static buildTime() {
    return new Date().format("MMdd-HHmmss")
}